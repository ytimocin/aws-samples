{
  "service": {
    "service": "node-postgres-ecs",
    "serviceObject": {
      "name": "node-postgres-ecs"
    },
    "provider": {
      "stage": "qa",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "runtime": "nodejs10.x",
      "region": "us-west-1",
      "tag": "latest",
      "vpc": {
        "subnetIds": [
          {
            "Ref": "PrivateSubnetAz1"
          },
          {
            "Ref": "PrivateSubnetAz2"
          }
        ]
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/node-postgres-ecs-qa-hello"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "qa",
                        "node-postgres-ecs",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/node-postgres-ecs-qa*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/node-postgres-ecs-qa*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "node-postgres-ecs",
                    "qa",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/node-postgres-ecs/qa/1574729391111-2019-11-26T00:49:51.111Z/node-postgres-ecs.zip"
              },
              "FunctionName": "node-postgres-ecs-qa-hello",
              "Handler": "lambda/hello.hello",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "qa"
                }
              }
            },
            "DependsOn": [
              "HelloLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "HelloLambdaVersionZEOoZtB3KK5ocgKpG3p3TEHAZgx5T2Z3IB2qK818RU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "JYd6+iemqgFuourjyByrtsLh4mBQizH56acgGCo0L60="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "qa-node-postgres-ecs",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Body": {
                "openapi": "3.0.0",
                "info": {
                  "version": "2019-09-25T18:08:34Z",
                  "title": "aws-samples/node-postgres-ecs"
                },
                "x-amazon-apigateway-request-validators": {
                  "body-only": {
                    "validateRequestBody": false,
                    "validateRequestParameters": false
                  }
                },
                "x-amazon-apigateway-request-validator": "body-only",
                "paths": {
                  "/users": {
                    "options": {
                      "summary": "CORS support",
                      "description": "Enable CORS by returning correct headers",
                      "tags": [
                        "CORS"
                      ],
                      "x-amazon-apigateway-integration": {
                        "type": "mock",
                        "requestTemplates": {
                          "application/json": "{\"statusCode\": 200}"
                        },
                        "responses": {
                          "default": {
                            "statusCode": "200",
                            "responseParameters": {
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'*'",
                              "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                              "application/json": {}
                            }
                          }
                        }
                      },
                      "responses": {
                        "200": {
                          "description": "Default response for CORS method",
                          "headers": {
                            "Access-Control-Allow-Headers": {
                              "schema": {
                                "type": "string"
                              }
                            },
                            "Access-Control-Allow-Methods": {
                              "schema": {
                                "type": "string"
                              }
                            },
                            "Access-Control-Allow-Origin": {
                              "schema": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "get": {
                      "responses": {
                        "200": {
                          "description": "200 response",
                          "headers": {
                            "Access-Control-Allow-Headers": {
                              "schema": {
                                "type": "string"
                              }
                            },
                            "Access-Control-Allow-Methods": {
                              "schema": {
                                "type": "string"
                              }
                            },
                            "Access-Control-Allow-Origin": {
                              "schema": {
                                "type": "string"
                              }
                            }
                          },
                          "content": {}
                        }
                      },
                      "security": [
                        {}
                      ],
                      "x-amazon-apigateway-integration": {
                        "responses": {
                          "default": {
                            "statusCode": "200",
                            "responseParameters": {
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'*'",
                              "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                          }
                        },
                        "uri": {
                          "Fn::Join": [
                            "",
                            [
                              "http://",
                              {
                                "Fn::GetAtt": [
                                  "NetworkLoadBalancer",
                                  "DNSName"
                                ]
                              },
                              "/hello"
                            ]
                          ]
                        },
                        "connectionType": "VPC_LINK",
                        "connectionId": {
                          "Ref": "EcsVpcLink"
                        },
                        "httpMethod": "GET",
                        "type": "HTTP_PROXY"
                      }
                    }
                  }
                },
                "servers": [
                  {
                    "url": ""
                  }
                ],
                "components": {
                  "securitySchemes": {
                    "apiKey": {
                      "type": "apiKey",
                      "name": "x-api-key",
                      "in": "header"
                    }
                  }
                }
              }
            }
          },
          "ApiGatewayResourceHello": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "hello",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1574729383314": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "qa"
            },
            "DependsOn": [
              "ApiGatewayMethodHelloGet"
            ]
          },
          "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": "10.14.0.0/16",
              "EnableDnsSupport": "true",
              "EnableDnsHostnames": "true",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "node-postgres-ecs-vpc-qa"
                }
              ]
            }
          },
          "VpcPeeringConnection": {
            "Type": "AWS::EC2::VPCPeeringConnection",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              },
              "PeerVpcId": "vpc-01d93ef469a85cd37"
            }
          },
          "PeerRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "DestinationCidrBlock": "10.32.0.0/16",
              "RouteTableId": {
                "Ref": "PrivateRouteTableViaNat"
              },
              "VpcPeeringConnectionId": {
                "Ref": "VpcPeeringConnection"
              }
            }
          },
          "UtilPeerRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "DestinationCidrBlock": "10.14.0.0/16",
              "RouteTableId": "rtb-0b226a2c1e080c554",
              "VpcPeeringConnectionId": {
                "Ref": "VpcPeeringConnection"
              }
            }
          },
          "BastionPeerRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "DestinationCidrBlock": "10.14.0.0/16",
              "RouteTableId": "rtb-0b226a2c1e080c554",
              "VpcPeeringConnectionId": {
                "Ref": "VpcPeeringConnection"
              }
            }
          },
          "PublicSubnetAz1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              },
              "CidrBlock": "10.14.1.0/24",
              "AvailabilityZone": "us-west-1a",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "node-postgres-ecs-public-subnet-1-qa"
                },
                {
                  "Key": "Purpose",
                  "Value": "A public subnet used by things that need a public Ip Address"
                }
              ]
            }
          },
          "PublicSubnetAz2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              },
              "CidrBlock": "10.14.2.0/24",
              "AvailabilityZone": "us-west-1b",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "node-postgres-ecs-public-subnet-2-qa"
                },
                {
                  "Key": "Purpose",
                  "Value": "A public subnet used by things that need a public Ip Address"
                }
              ]
            }
          },
          "PrivateSubnetAz1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              },
              "CidrBlock": "10.14.3.0/24",
              "AvailabilityZone": "us-west-1a",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "node-postgres-ecs-private-subnet-1-qa"
                },
                {
                  "Key": "Purpose",
                  "Value": "A private subnet used by things that do not need a public Ip Address"
                }
              ]
            }
          },
          "PrivateSubnetAz2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              },
              "CidrBlock": "10.14.4.0/24",
              "AvailabilityZone": "us-west-1b",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "node-postgres-ecs-private-subnet-2-qa"
                },
                {
                  "Key": "Purpose",
                  "Value": "A private subnet used by things that do not need a public Ip Address"
                }
              ]
            }
          },
          "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
          },
          "GatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "RouteViaInternetGateway": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              }
            }
          },
          "PublicRouteViaInternetGateway": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAttachment",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteViaInternetGateway"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "NatElasticIp": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
              "Domain": "vpc"
            }
          },
          "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "GatewayAttachment",
            "Properties": {
              "AllocationId": {
                "Fn::GetAtt": [
                  "NatElasticIp",
                  "AllocationId"
                ]
              },
              "SubnetId": {
                "Ref": "PublicSubnetAz1"
              }
            }
          },
          "PrivateRouteTableViaNat": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "Vpc"
              }
            }
          },
          "PrivateRouteViaNat": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAttachment",
            "Properties": {
              "RouteTableId": {
                "Ref": "PrivateRouteTableViaNat"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                "Ref": "NatGateway"
              }
            }
          },
          "PubSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetAz1"
              },
              "RouteTableId": {
                "Ref": "RouteViaInternetGateway"
              }
            }
          },
          "PubSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetAz2"
              },
              "RouteTableId": {
                "Ref": "RouteViaInternetGateway"
              }
            }
          },
          "PrivSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PrivateSubnetAz1"
              },
              "RouteTableId": {
                "Ref": "PrivateRouteTableViaNat"
              }
            }
          },
          "PrivSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PrivateSubnetAz2"
              },
              "RouteTableId": {
                "Ref": "PrivateRouteTableViaNat"
              }
            }
          },
          "NetworkLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
              "Scheme": "internal",
              "Name": "node-postgres-ecs-lb-qa",
              "Subnets": [
                {
                  "Ref": "PrivateSubnetAz1"
                },
                {
                  "Ref": "PrivateSubnetAz2"
                }
              ],
              "Type": "network"
            }
          },
          "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": [
              "NetworkLoadBalancer"
            ],
            "Properties": {
              "Name": "node-postgres-ecs-tg-qa",
              "TargetGroupAttributes": [
                {
                  "Key": "deregistration_delay.timeout_seconds",
                  "Value": 10
                }
              ],
              "HealthCheckIntervalSeconds": 30,
              "HealthCheckProtocol": "TCP",
              "HealthyThresholdCount": 3,
              "UnhealthyThresholdCount": 3,
              "TargetType": "ip",
              "Port": "3000",
              "Protocol": "TCP",
              "VpcId": {
                "Ref": "Vpc"
              }
            }
          },
          "NetworkLoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
              "DefaultActions": [
                {
                  "TargetGroupArn": {
                    "Ref": "TargetGroup"
                  },
                  "Type": "forward"
                }
              ],
              "LoadBalancerArn": {
                "Ref": "NetworkLoadBalancer"
              },
              "Port": "80",
              "Protocol": "TCP"
            }
          },
          "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
              "ClusterName": "node-postgres-ecs-cluster-qa"
            }
          },
          "ECSTaskExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "AmazonECSTaskExecutionRolePolicy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ecr:GetAuthorizationToken"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ecr:BatchCheckLayerAvailability",
                          "ecr:GetDownloadUrlForLayer",
                          "ecr:BatchGetImage"
                        ],
                        "Resource": {
                          "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/aws-samples/node-postgres-ecs/*"
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:DescribeLogGroups",
                          "logs:DescribeLogStreams",
                          "logs:PutLogEvents",
                          "logs:GetLogEvents",
                          "logs:FilterLogEvents"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ECSTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "AmazonECSTaskRolePolicy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:DeleteObject",
                          "s3:PutObjectAcl"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ssm:GetParameter",
                          "ssm:GetParameters"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ContainerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Access to containers",
              "VpcId": {
                "Ref": "Vpc"
              }
            }
          },
          "EcsSecurityGroupIngressFromClient": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
              "Description": "Ingress from external clients",
              "GroupId": {
                "Ref": "ContainerSecurityGroup"
              },
              "CidrIp": "0.0.0.0/0",
              "FromPort": "3000",
              "ToPort": "3000",
              "IpProtocol": "tcp"
            }
          },
          "EcsSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
              "CidrIp": "0.0.0.0/0",
              "Description": "All traffic",
              "FromPort": -1,
              "GroupId": {
                "Ref": "ContainerSecurityGroup"
              },
              "IpProtocol": -1,
              "ToPort": -1
            }
          },
          "LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "node-postgres-ecs-qa"
            }
          },
          "TaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "DependsOn": [
              "LogGroup"
            ],
            "Properties": {
              "Family": "node-postgres-ecs-qa",
              "Cpu": "256",
              "Memory": "512",
              "NetworkMode": "awsvpc",
              "RequiresCompatibilities": [
                "FARGATE"
              ],
              "ExecutionRoleArn": {
                "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${ECSTaskExecutionRole}"
              },
              "TaskRoleArn": {
                "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${ECSTaskRole}"
              },
              "ContainerDefinitions": [
                {
                  "Name": "node-postgres-ecs-container-qa",
                  "Cpu": "256",
                  "Memory": "512",
                  "Image": "574698013493.dkr.ecr.us-west-1.amazonaws.com/aws-samples/node-postgres-ecs/qa:latest",
                  "PortMappings": [
                    {
                      "ContainerPort": "3000",
                      "HostPort": "3000",
                      "Protocol": "tcp"
                    }
                  ],
                  "Environment": [
                    {
                      "Name": "ENV",
                      "Value": "qa"
                    },
                    {
                      "Name": "NODE_ENV",
                      "Value": "qa"
                    },
                    {
                      "Name": "STAGE",
                      "Value": "qa"
                    },
                    {
                      "Name": "PORT",
                      "Value": "3000"
                    },
                    {
                      "Name": "WORKERS",
                      "Value": 1
                    }
                  ],
                  "LogConfiguration": {
                    "LogDriver": "awslogs",
                    "Options": {
                      "awslogs-group": {
                        "Ref": "LogGroup"
                      },
                      "awslogs-region": {
                        "Ref": "AWS::Region"
                      },
                      "awslogs-stream-prefix": "qa"
                    }
                  }
                }
              ]
            }
          },
          "Service": {
            "Type": "AWS::ECS::Service",
            "DependsOn": [
              "ContainerSecurityGroup",
              "ECSCluster",
              "TargetGroup",
              "TaskDefinition",
              "NetworkLoadBalancer"
            ],
            "Properties": {
              "ServiceName": "node-postgres-ecs-qa",
              "Cluster": {
                "Ref": "ECSCluster"
              },
              "LaunchType": "FARGATE",
              "DeploymentConfiguration": {
                "MaximumPercent": 200,
                "MinimumHealthyPercent": 75
              },
              "DesiredCount": "1",
              "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                  "SecurityGroups": [
                    {
                      "Ref": "ContainerSecurityGroup"
                    }
                  ],
                  "Subnets": [
                    {
                      "Ref": "PrivateSubnetAz1"
                    },
                    {
                      "Ref": "PrivateSubnetAz2"
                    }
                  ]
                }
              },
              "TaskDefinition": {
                "Ref": "TaskDefinition"
              },
              "LoadBalancers": [
                {
                  "ContainerName": "node-postgres-ecs-container-qa",
                  "ContainerPort": "3000",
                  "TargetGroupArn": {
                    "Ref": "TargetGroup"
                  }
                }
              ]
            }
          },
          "DBClusterParameterGroup": {
            "Type": "AWS::RDS::DBClusterParameterGroup",
            "Properties": {
              "Description": "Parameter Group for Aurora Cluster force SSL enabled",
              "Family": "aurora-postgresql10",
              "Parameters": {
                "rds.force_ssl": "1"
              },
              "Tags": [
                {
                  "Key": "createdBy",
                  "Value": "node-postgres-ecs-qa"
                }
              ]
            }
          },
          "DbSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "For allowing access to the database port from vpc ids.",
              "VpcId": {
                "Ref": "Vpc"
              },
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": 5432,
                  "ToPort": 5432,
                  "CidrIp": "10.14.0.0/16"
                },
                {
                  "IpProtocol": "tcp",
                  "FromPort": 5432,
                  "ToPort": 5432,
                  "CidrIp": "10.32.0.0/16"
                }
              ],
              "SecurityGroupEgress": [
                {
                  "IpProtocol": -1,
                  "CidrIp": "0.0.0.0/0"
                }
              ]
            }
          },
          "DatabaseSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
              "DBSubnetGroupDescription": "DB Subnets",
              "SubnetIds": [
                {
                  "Ref": "PrivateSubnetAz1"
                },
                {
                  "Ref": "PrivateSubnetAz2"
                }
              ]
            }
          },
          "AuroraDatabaseCluster": {
            "Type": "AWS::RDS::DBCluster",
            "DeletionPolicy": "Delete",
            "Properties": {
              "Engine": "aurora-postgresql",
              "EngineVersion": "10.7",
              "DBClusterIdentifier": "node-postgres-ecs-aurorapg-dbcluster-qa",
              "DBClusterParameterGroupName": {
                "Ref": "DBClusterParameterGroup"
              },
              "DatabaseName": "qa",
              "MasterUsername": "test",
              "MasterUserPassword": "TestTestTest",
              "EnableIAMDatabaseAuthentication": "true",
              "StorageEncrypted": "true",
              "Port": 5432,
              "Tags": [
                {
                  "Key": "name",
                  "Value": "node-postgres-ecs-aurorapg-dbcluster-qa"
                }
              ],
              "DBSubnetGroupName": {
                "Ref": "DatabaseSubnetGroup"
              },
              "VpcSecurityGroupIds": [
                {
                  "Fn::GetAtt": [
                    "DbSecurityGroup",
                    "GroupId"
                  ]
                }
              ]
            }
          },
          "AuroraDatabase": {
            "Type": "AWS::RDS::DBInstance",
            "DependsOn": "AuroraDatabaseCluster",
            "Properties": {
              "Tags": [
                {
                  "Key": "name",
                  "Value": "node-postgres-ecs-aurorapg-qa"
                }
              ],
              "Engine": "aurora-postgresql",
              "EngineVersion": "10.7",
              "DBInstanceIdentifier": "node-postgres-ecs-aurorapg-qa",
              "DBClusterIdentifier": {
                "Ref": "AuroraDatabaseCluster"
              },
              "DBSubnetGroupName": {
                "Ref": "DatabaseSubnetGroup"
              },
              "DBInstanceClass": "db.t3.medium",
              "PubliclyAccessible": false
            }
          },
          "DbHostSharedParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
              "Description": "Sample DB Cluster Host",
              "Name": "/services/node-postgres-ecs/env/qa/resources/database/host",
              "Type": "String",
              "Value": {
                "Fn::GetAtt": [
                  "AuroraDatabaseCluster",
                  "Endpoint.Address"
                ]
              }
            }
          },
          "ApiGatewayDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "qa"
            }
          },
          "EcsVpcLink": {
            "Type": "AWS::ApiGateway::VpcLink",
            "Properties": {
              "Name": "node-postgres-ecs-qa-ecs-private-link",
              "TargetArns": [
                {
                  "Ref": "NetworkLoadBalancer"
                }
              ]
            }
          },
          "ApiGatewayApiKey": {
            "Type": "AWS::ApiGateway::ApiKey",
            "DependsOn": [
              "ApiGatewayDeployment"
            ],
            "Properties": {
              "Name": "node-postgres-ecs-api-key-qa",
              "Enabled": true,
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "qa"
                }
              ]
            }
          },
          "UsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": [
              "ApiGatewayDeployment"
            ],
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "qa"
                }
              ],
              "UsagePlanName": "node-postgres-ecs-usage-plan-qa"
            }
          },
          "UsagePlanKey": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "UsagePlan"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionZEOoZtB3KK5ocgKpG3p3TEHAZgx5T2Z3IB2qK818RU"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/qa"
                ]
              ]
            }
          },
          "ApiKeyId": {
            "Description": "Generated API Key",
            "Value": {
              "Ref": "ApiGatewayApiKey"
            },
            "Export": {
              "Name": "node-postgres-ecs-api-key-qa"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "DB_USERNAME": "test",
      "DB_PASSWORD": "TestTestTest",
      "DB_DBNAME": "qa",
      "dbUsername": {
        "dev": "test",
        "qa": "test",
        "stg": "test",
        "prd": "test"
      },
      "dbPassword": {
        "dev": "TestTestTest",
        "qa": "TestTestTest",
        "stg": "TestTestTest",
        "prd": "TestTestTest"
      },
      "deletionPolicy": {
        "qa": "Delete",
        "stg": "Delete",
        "prd": "Snapshot"
      },
      "containerPort": "3000",
      "containerCPU": {
        "qa": "256",
        "stg": "512",
        "prd": "1024"
      },
      "containerMemory": {
        "qa": "512",
        "stg": "1024",
        "prd": "2048"
      },
      "gunicornWorkers": {
        "qa": 1,
        "stg": 2,
        "prd": 3
      },
      "imageUrl": "574698013493.dkr.ecr.us-west-1.amazonaws.com/aws-samples/node-postgres-ecs/qa:latest",
      "desiredCount": "1",
      "cidrPrefixes": {
        "qa": 10.14,
        "dev": 10.15,
        "stg": 10.16,
        "prd": 10.17
      },
      "cidrBlock": {
        "qa": "10.14.0.0/16",
        "dev": "10.15.0.0/16",
        "stg": "10.16.0.0/16",
        "prd": "10.17.0.0/16"
      },
      "customDomain": {
        "domainName": "api.qa.ogrencimerkezi.com",
        "stage": "qa",
        "certificateArn": "arn:aws:acm:us-west-1:574698013493:certificate/786ec8d8-a09c-47eb-adc0-25d3ac8c4737",
        "basePath": "",
        "createRoute53Record": true,
        "enabled": false
      },
      "enableCustomDomain": {
        "dev": false,
        "qa": false,
        "stg": true,
        "prd": true
      },
      "domain": {
        "qa": "api.qa.ogrencimerkezi.com",
        "stg": "api.stg.ogrencimerkezi.com",
        "prd": "api.prd.ogrencimerkezi.com"
      },
      "certificate": {
        "dev": "arn:aws:acm:us-west-1:574698013493:certificate/786ec8d8-a09c-47eb-adc0-25d3ac8c4737",
        "qa": "arn:aws:acm:us-west-1:574698013493:certificate/786ec8d8-a09c-47eb-adc0-25d3ac8c4737",
        "stg": "arn:aws:acm:us-west-1:574698013493:certificate/786ec8d8-a09c-47eb-adc0-25d3ac8c4737",
        "prd": "arn:aws:acm:us-west-1:574698013493:certificate/786ec8d8-a09c-47eb-adc0-25d3ac8c4737"
      }
    },
    "plugins": [
      "serverless-pseudo-parameters",
      "serverless-domain-manager",
      "serverless-python-requirements",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "lambda/hello.hello",
        "events": [
          {
            "http": {
              "path": "hello",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "ENV": "qa"
        },
        "name": "node-postgres-ecs-qa-hello",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "qa-node-postgres-ecs",
            "Body": {
              "openapi": "3.0.0",
              "info": {
                "version": "2019-09-25T18:08:34Z",
                "title": "aws-samples/node-postgres-ecs"
              },
              "x-amazon-apigateway-request-validators": {
                "body-only": {
                  "validateRequestBody": false,
                  "validateRequestParameters": false
                }
              },
              "x-amazon-apigateway-request-validator": "body-only",
              "paths": {
                "/users": {
                  "options": {
                    "summary": "CORS support",
                    "description": "Enable CORS by returning correct headers",
                    "tags": [
                      "CORS"
                    ],
                    "x-amazon-apigateway-integration": {
                      "type": "mock",
                      "requestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                      },
                      "responses": {
                        "default": {
                          "statusCode": "200",
                          "responseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                            "method.response.header.Access-Control-Allow-Methods": "'*'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                          },
                          "responseTemplates": {
                            "application/json": {}
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                          "Access-Control-Allow-Headers": {
                            "schema": {
                              "type": "string"
                            }
                          },
                          "Access-Control-Allow-Methods": {
                            "schema": {
                              "type": "string"
                            }
                          },
                          "Access-Control-Allow-Origin": {
                            "schema": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "get": {
                    "responses": {
                      "200": {
                        "description": "200 response",
                        "headers": {
                          "Access-Control-Allow-Headers": {
                            "schema": {
                              "type": "string"
                            }
                          },
                          "Access-Control-Allow-Methods": {
                            "schema": {
                              "type": "string"
                            }
                          },
                          "Access-Control-Allow-Origin": {
                            "schema": {
                              "type": "string"
                            }
                          }
                        },
                        "content": {}
                      }
                    },
                    "security": [
                      {}
                    ],
                    "x-amazon-apigateway-integration": {
                      "responses": {
                        "default": {
                          "statusCode": "200",
                          "responseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                            "method.response.header.Access-Control-Allow-Methods": "'*'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                          }
                        }
                      },
                      "uri": {
                        "Fn::Join": [
                          "",
                          [
                            "http://",
                            {
                              "Fn::GetAtt": [
                                "NetworkLoadBalancer",
                                "DNSName"
                              ]
                            },
                            "/hello"
                          ]
                        ]
                      },
                      "connectionType": "VPC_LINK",
                      "connectionId": {
                        "Ref": "EcsVpcLink"
                      },
                      "httpMethod": "GET",
                      "type": "HTTP_PROXY"
                    }
                  }
                }
              },
              "servers": [
                {
                  "url": ""
                }
              ],
              "components": {
                "securitySchemes": {
                  "apiKey": {
                    "type": "apiKey",
                    "name": "x-api-key",
                    "in": "header"
                  }
                }
              }
            }
          }
        },
        "Vpc": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "10.14.0.0/16",
            "EnableDnsSupport": "true",
            "EnableDnsHostnames": "true",
            "Tags": [
              {
                "Key": "Name",
                "Value": "node-postgres-ecs-vpc-qa"
              }
            ]
          }
        },
        "VpcPeeringConnection": {
          "Type": "AWS::EC2::VPCPeeringConnection",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            },
            "PeerVpcId": "vpc-01d93ef469a85cd37"
          }
        },
        "PeerRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "DestinationCidrBlock": "10.32.0.0/16",
            "RouteTableId": {
              "Ref": "PrivateRouteTableViaNat"
            },
            "VpcPeeringConnectionId": {
              "Ref": "VpcPeeringConnection"
            }
          }
        },
        "UtilPeerRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "DestinationCidrBlock": "10.14.0.0/16",
            "RouteTableId": "rtb-0b226a2c1e080c554",
            "VpcPeeringConnectionId": {
              "Ref": "VpcPeeringConnection"
            }
          }
        },
        "BastionPeerRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "DestinationCidrBlock": "10.14.0.0/16",
            "RouteTableId": "rtb-0b226a2c1e080c554",
            "VpcPeeringConnectionId": {
              "Ref": "VpcPeeringConnection"
            }
          }
        },
        "PublicSubnetAz1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            },
            "CidrBlock": "10.14.1.0/24",
            "AvailabilityZone": "us-west-1a",
            "Tags": [
              {
                "Key": "Name",
                "Value": "node-postgres-ecs-public-subnet-1-qa"
              },
              {
                "Key": "Purpose",
                "Value": "A public subnet used by things that need a public Ip Address"
              }
            ]
          }
        },
        "PublicSubnetAz2": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            },
            "CidrBlock": "10.14.2.0/24",
            "AvailabilityZone": "us-west-1b",
            "Tags": [
              {
                "Key": "Name",
                "Value": "node-postgres-ecs-public-subnet-2-qa"
              },
              {
                "Key": "Purpose",
                "Value": "A public subnet used by things that need a public Ip Address"
              }
            ]
          }
        },
        "PrivateSubnetAz1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            },
            "CidrBlock": "10.14.3.0/24",
            "AvailabilityZone": "us-west-1a",
            "Tags": [
              {
                "Key": "Name",
                "Value": "node-postgres-ecs-private-subnet-1-qa"
              },
              {
                "Key": "Purpose",
                "Value": "A private subnet used by things that do not need a public Ip Address"
              }
            ]
          }
        },
        "PrivateSubnetAz2": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            },
            "CidrBlock": "10.14.4.0/24",
            "AvailabilityZone": "us-west-1b",
            "Tags": [
              {
                "Key": "Name",
                "Value": "node-postgres-ecs-private-subnet-2-qa"
              },
              {
                "Key": "Purpose",
                "Value": "A private subnet used by things that do not need a public Ip Address"
              }
            ]
          }
        },
        "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway"
        },
        "GatewayAttachment": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            },
            "InternetGatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "RouteViaInternetGateway": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            }
          }
        },
        "PublicRouteViaInternetGateway": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "GatewayAttachment",
          "Properties": {
            "RouteTableId": {
              "Ref": "RouteViaInternetGateway"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "NatElasticIp": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
            "Domain": "vpc"
          }
        },
        "NatGateway": {
          "Type": "AWS::EC2::NatGateway",
          "DependsOn": "GatewayAttachment",
          "Properties": {
            "AllocationId": {
              "Fn::GetAtt": [
                "NatElasticIp",
                "AllocationId"
              ]
            },
            "SubnetId": {
              "Ref": "PublicSubnetAz1"
            }
          }
        },
        "PrivateRouteTableViaNat": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "Vpc"
            }
          }
        },
        "PrivateRouteViaNat": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "GatewayAttachment",
          "Properties": {
            "RouteTableId": {
              "Ref": "PrivateRouteTableViaNat"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NatGateway"
            }
          }
        },
        "PubSubnet1RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetAz1"
            },
            "RouteTableId": {
              "Ref": "RouteViaInternetGateway"
            }
          }
        },
        "PubSubnet2RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetAz2"
            },
            "RouteTableId": {
              "Ref": "RouteViaInternetGateway"
            }
          }
        },
        "PrivSubnet1RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PrivateSubnetAz1"
            },
            "RouteTableId": {
              "Ref": "PrivateRouteTableViaNat"
            }
          }
        },
        "PrivSubnet2RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PrivateSubnetAz2"
            },
            "RouteTableId": {
              "Ref": "PrivateRouteTableViaNat"
            }
          }
        },
        "NetworkLoadBalancer": {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
            "Scheme": "internal",
            "Name": "node-postgres-ecs-lb-qa",
            "Subnets": [
              {
                "Ref": "PrivateSubnetAz1"
              },
              {
                "Ref": "PrivateSubnetAz2"
              }
            ],
            "Type": "network"
          }
        },
        "TargetGroup": {
          "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
          "DependsOn": [
            "NetworkLoadBalancer"
          ],
          "Properties": {
            "Name": "node-postgres-ecs-tg-qa",
            "TargetGroupAttributes": [
              {
                "Key": "deregistration_delay.timeout_seconds",
                "Value": 10
              }
            ],
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckProtocol": "TCP",
            "HealthyThresholdCount": 3,
            "UnhealthyThresholdCount": 3,
            "TargetType": "ip",
            "Port": "3000",
            "Protocol": "TCP",
            "VpcId": {
              "Ref": "Vpc"
            }
          }
        },
        "NetworkLoadBalancerListener": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
            "DefaultActions": [
              {
                "TargetGroupArn": {
                  "Ref": "TargetGroup"
                },
                "Type": "forward"
              }
            ],
            "LoadBalancerArn": {
              "Ref": "NetworkLoadBalancer"
            },
            "Port": "80",
            "Protocol": "TCP"
          }
        },
        "ECSCluster": {
          "Type": "AWS::ECS::Cluster",
          "Properties": {
            "ClusterName": "node-postgres-ecs-cluster-qa"
          }
        },
        "ECSTaskExecutionRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "ecs-tasks.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "AmazonECSTaskExecutionRolePolicy",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ecr:GetAuthorizationToken"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage"
                      ],
                      "Resource": "arn:aws:ecr:#{AWS::Region}:#{AWS::AccountId}:repository/aws-samples/node-postgres-ecs/*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams",
                        "logs:PutLogEvents",
                        "logs:GetLogEvents",
                        "logs:FilterLogEvents"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "ECSTaskRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "ecs-tasks.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "AmazonECSTaskRolePolicy",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:DeleteObject",
                        "s3:PutObjectAcl"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:GetParameter",
                        "ssm:GetParameters"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "ContainerSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Access to containers",
            "VpcId": {
              "Ref": "Vpc"
            }
          }
        },
        "EcsSecurityGroupIngressFromClient": {
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "Description": "Ingress from external clients",
            "GroupId": {
              "Ref": "ContainerSecurityGroup"
            },
            "CidrIp": "0.0.0.0/0",
            "FromPort": "3000",
            "ToPort": "3000",
            "IpProtocol": "tcp"
          }
        },
        "EcsSecurityGroupEgress": {
          "Type": "AWS::EC2::SecurityGroupEgress",
          "Properties": {
            "CidrIp": "0.0.0.0/0",
            "Description": "All traffic",
            "FromPort": -1,
            "GroupId": {
              "Ref": "ContainerSecurityGroup"
            },
            "IpProtocol": -1,
            "ToPort": -1
          }
        },
        "LogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "node-postgres-ecs-qa"
          }
        },
        "TaskDefinition": {
          "Type": "AWS::ECS::TaskDefinition",
          "DependsOn": [
            "LogGroup"
          ],
          "Properties": {
            "Family": "node-postgres-ecs-qa",
            "Cpu": "256",
            "Memory": "512",
            "NetworkMode": "awsvpc",
            "RequiresCompatibilities": [
              "FARGATE"
            ],
            "ExecutionRoleArn": "arn:aws:iam::#{AWS::AccountId}:role/#{ECSTaskExecutionRole}",
            "TaskRoleArn": "arn:aws:iam::#{AWS::AccountId}:role/#{ECSTaskRole}",
            "ContainerDefinitions": [
              {
                "Name": "node-postgres-ecs-container-qa",
                "Cpu": "256",
                "Memory": "512",
                "Image": "574698013493.dkr.ecr.us-west-1.amazonaws.com/aws-samples/node-postgres-ecs/qa:latest",
                "PortMappings": [
                  {
                    "ContainerPort": "3000",
                    "HostPort": "3000",
                    "Protocol": "tcp"
                  }
                ],
                "Environment": [
                  {
                    "Name": "ENV",
                    "Value": "qa"
                  },
                  {
                    "Name": "NODE_ENV",
                    "Value": "qa"
                  },
                  {
                    "Name": "STAGE",
                    "Value": "qa"
                  },
                  {
                    "Name": "PORT",
                    "Value": "3000"
                  },
                  {
                    "Name": "WORKERS",
                    "Value": 1
                  }
                ],
                "LogConfiguration": {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "LogGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "qa"
                  }
                }
              }
            ]
          }
        },
        "Service": {
          "Type": "AWS::ECS::Service",
          "DependsOn": [
            "ContainerSecurityGroup",
            "ECSCluster",
            "TargetGroup",
            "TaskDefinition",
            "NetworkLoadBalancer"
          ],
          "Properties": {
            "ServiceName": "node-postgres-ecs-qa",
            "Cluster": {
              "Ref": "ECSCluster"
            },
            "LaunchType": "FARGATE",
            "DeploymentConfiguration": {
              "MaximumPercent": 200,
              "MinimumHealthyPercent": 75
            },
            "DesiredCount": "1",
            "NetworkConfiguration": {
              "AwsvpcConfiguration": {
                "SecurityGroups": [
                  {
                    "Ref": "ContainerSecurityGroup"
                  }
                ],
                "Subnets": [
                  {
                    "Ref": "PrivateSubnetAz1"
                  },
                  {
                    "Ref": "PrivateSubnetAz2"
                  }
                ]
              }
            },
            "TaskDefinition": {
              "Ref": "TaskDefinition"
            },
            "LoadBalancers": [
              {
                "ContainerName": "node-postgres-ecs-container-qa",
                "ContainerPort": "3000",
                "TargetGroupArn": {
                  "Ref": "TargetGroup"
                }
              }
            ]
          }
        },
        "DBClusterParameterGroup": {
          "Type": "AWS::RDS::DBClusterParameterGroup",
          "Properties": {
            "Description": "Parameter Group for Aurora Cluster force SSL enabled",
            "Family": "aurora-postgresql10",
            "Parameters": {
              "rds.force_ssl": "1"
            },
            "Tags": [
              {
                "Key": "createdBy",
                "Value": "node-postgres-ecs-qa"
              }
            ]
          }
        },
        "DbSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "For allowing access to the database port from vpc ids.",
            "VpcId": {
              "Ref": "Vpc"
            },
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": 5432,
                "ToPort": 5432,
                "CidrIp": "10.14.0.0/16"
              },
              {
                "IpProtocol": "tcp",
                "FromPort": 5432,
                "ToPort": 5432,
                "CidrIp": "10.32.0.0/16"
              }
            ],
            "SecurityGroupEgress": [
              {
                "IpProtocol": -1,
                "CidrIp": "0.0.0.0/0"
              }
            ]
          }
        },
        "DatabaseSubnetGroup": {
          "Type": "AWS::RDS::DBSubnetGroup",
          "Properties": {
            "DBSubnetGroupDescription": "DB Subnets",
            "SubnetIds": [
              {
                "Ref": "PrivateSubnetAz1"
              },
              {
                "Ref": "PrivateSubnetAz2"
              }
            ]
          }
        },
        "AuroraDatabaseCluster": {
          "Type": "AWS::RDS::DBCluster",
          "DeletionPolicy": "Delete",
          "Properties": {
            "Engine": "aurora-postgresql",
            "EngineVersion": "10.7",
            "DBClusterIdentifier": "node-postgres-ecs-aurorapg-dbcluster-qa",
            "DBClusterParameterGroupName": {
              "Ref": "DBClusterParameterGroup"
            },
            "DatabaseName": "qa",
            "MasterUsername": "test",
            "MasterUserPassword": "TestTestTest",
            "EnableIAMDatabaseAuthentication": "true",
            "StorageEncrypted": "true",
            "Port": 5432,
            "Tags": [
              {
                "Key": "name",
                "Value": "node-postgres-ecs-aurorapg-dbcluster-qa"
              }
            ],
            "DBSubnetGroupName": {
              "Ref": "DatabaseSubnetGroup"
            },
            "VpcSecurityGroupIds": [
              {
                "Fn::GetAtt": [
                  "DbSecurityGroup",
                  "GroupId"
                ]
              }
            ]
          }
        },
        "AuroraDatabase": {
          "Type": "AWS::RDS::DBInstance",
          "DependsOn": "AuroraDatabaseCluster",
          "Properties": {
            "Tags": [
              {
                "Key": "name",
                "Value": "node-postgres-ecs-aurorapg-qa"
              }
            ],
            "Engine": "aurora-postgresql",
            "EngineVersion": "10.7",
            "DBInstanceIdentifier": "node-postgres-ecs-aurorapg-qa",
            "DBClusterIdentifier": {
              "Ref": "AuroraDatabaseCluster"
            },
            "DBSubnetGroupName": {
              "Ref": "DatabaseSubnetGroup"
            },
            "DBInstanceClass": "db.t3.medium",
            "PubliclyAccessible": false
          }
        },
        "DbHostSharedParameter": {
          "Type": "AWS::SSM::Parameter",
          "Properties": {
            "Description": "Sample DB Cluster Host",
            "Name": "/services/node-postgres-ecs/env/qa/resources/database/host",
            "Type": "String",
            "Value": {
              "Fn::GetAtt": [
                "AuroraDatabaseCluster",
                "Endpoint.Address"
              ]
            }
          }
        },
        "ApiGatewayDeployment": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "qa"
          }
        },
        "EcsVpcLink": {
          "Type": "AWS::ApiGateway::VpcLink",
          "Properties": {
            "Name": "node-postgres-ecs-qa-ecs-private-link",
            "TargetArns": [
              {
                "Ref": "NetworkLoadBalancer"
              }
            ]
          }
        },
        "ApiGatewayApiKey": {
          "Type": "AWS::ApiGateway::ApiKey",
          "DependsOn": [
            "ApiGatewayDeployment"
          ],
          "Properties": {
            "Name": "node-postgres-ecs-api-key-qa",
            "Enabled": true,
            "StageKeys": [
              {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "qa"
              }
            ]
          }
        },
        "UsagePlan": {
          "Type": "AWS::ApiGateway::UsagePlan",
          "DependsOn": [
            "ApiGatewayDeployment"
          ],
          "Properties": {
            "ApiStages": [
              {
                "ApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "Stage": "qa"
              }
            ],
            "UsagePlanName": "node-postgres-ecs-usage-plan-qa"
          }
        },
        "UsagePlanKey": {
          "Type": "AWS::ApiGateway::UsagePlanKey",
          "Properties": {
            "KeyId": {
              "Ref": "ApiGatewayApiKey"
            },
            "KeyType": "API_KEY",
            "UsagePlanId": {
              "Ref": "UsagePlan"
            }
          }
        }
      },
      "Outputs": {
        "ApiKeyId": {
          "Description": "Generated API Key",
          "Value": {
            "Ref": "ApiGatewayApiKey"
          },
          "Export": {
            "Name": "node-postgres-ecs-api-key-qa"
          }
        }
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/Users/yetkin.timocin/code/aws-samples/node-postgres-ecs/.serverless/node-postgres-ecs.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/node-postgres-ecs/qa/1574729391111-2019-11-26T00:49:51.111Z",
    "artifact": "node-postgres-ecs.zip"
  }
}